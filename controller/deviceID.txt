const newRegisterSchema = new mongoose.Schema({
    name: String,
    email: String,
    phone: String,
    grade: String,
    batch: String,
    studentID: String,
    courses: [String],
    activeDevice: String, // Add this field
    // other fields...
});






const { v4: uuidv4 } = require('uuid'); // Install uuid package if not already

const generateDeviceId = () => {
    return uuidv4(); // Generates a unique device ID
};







exports.login = async(req, res) => {
    const { mobileNumber, otp } = req.body;
    console.log(mobileNumber);
    console.log(otp);

    try {
        console.log("1");
        const isVerified = await verifyOTP(mobileNumber, otp);
        console.log("2");

        if (isVerified) {
            const user = await newRegister.findOne({ phone: mobileNumber });
            if (!user) {
                return res.status(400).json("User not found");
            }

            // Check if the user is already logged in from another device
            if (user.activeDevice) {
                return res.status(403).json("User is already logged in from another device");
            }

            // Generate a new device ID
            const deviceId = generateDeviceId();
            user.activeDevice = deviceId; // Store the active device ID
            await user.save(); // Save the updated user data

            res.status(200).json("Verified Successfully");
        } else {
            res.status(400).json("Invalid OTP");
        }
    } catch (error) {
        res.status(400).json("Failed to login");
    }
};










exports.logout = async(req, res) => {
    const { mobileNumber } = req.body;

    try {
        const user = await newRegister.findOne({ phone: mobileNumber });
        if (!user) {
            return res.status(400).json("User not found");
        }

        user.activeDevice = null; // Clear the active device
        await user.save();

        res.status(200).json("Logged out successfully");
    } catch (error) {
        res.status(400).json("Failed to log out");
    }
};